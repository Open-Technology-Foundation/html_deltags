#!/usr/bin/env bash
#shellcheck disable=SC1090,SC1091,SC2155
##
# Install 'html_deltags' - HTML tag-remover/reformatter.
#
# This script:
# 1. Copies html_deltags files to /usr/local/share/html_deltags
# 2. Creates a virtual environment (.venv) within the installation directory
# 3. Creates symlink /usr/local/bin/html_deltags -> /usr/local/share/html_deltags/html_deltags
#
# Options:
#   -U, --upgrade  Download the latest version from the repository before installing
#   -h, --help     Show this help message
# 
# Requires root/sudo access.
#
set -euo pipefail
shopt -s extglob

# Define constants
declare -r PRGNAME="html_deltags"
declare -r INSTALL_DIR="/usr/local/share/${PRGNAME}"
declare -r SYMLINK_PATH="/usr/local/bin/${PRGNAME}"
declare -r SCRIPT_PATH=$(readlink -en -- "$0")
declare SCRIPT_DIR="${SCRIPT_PATH%/*}"  # Not readonly so we can update it during upgrade

# Define repository URL
declare -r REPO_URL="https://github.com/Open-Technology-Foundation/html_deltags"
declare -i UPGRADE=0
declare TEMP_DIR=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      # Display help text by extracting the header comment
      sed -n '3,16p' "$0" | sed 's/^# //'
      exit 0
      ;;
    -U|--upgrade)
      UPGRADE=1
      shift
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use --help to see available options"
      exit 1
      ;;
  esac
done

# Check if running as root
if ((EUID)); then
  echo "Error: This script requires root privileges" >&2
  echo "Please run with sudo: sudo $0" >&2
  exit 1
fi

# Start installation
if ((UPGRADE)); then
  echo "Upgrading ${PRGNAME} at ${INSTALL_DIR} with the latest version"
else
  echo "Installing ${PRGNAME} to ${INSTALL_DIR}"
fi
echo "A symlink will be created at ${SYMLINK_PATH}"
echo

# Ask for confirmation
read -r -p "Continue with installation? (y/n) " response
[[ "$response" != "y" ]] && { echo "Installation aborted"; exit 0; }

# Create temp directory if upgrading
if ((UPGRADE)); then
  echo "Upgrading from the repository..."
  
  # Check if git is installed
  if ! command -v git &> /dev/null; then
    echo "Error: git is not installed. Please install git to use the upgrade option."
    exit 1
  fi
  
  # Create temporary directory
  TEMP_DIR=$(mktemp -d)
  echo "Cloning latest version from ${REPO_URL}..."
  
  # Clone repository
  echo "Running: git clone --depth 1 ${REPO_URL} ${TEMP_DIR}/${PRGNAME}"
  if ! git clone --depth 1 "${REPO_URL}" "${TEMP_DIR}/${PRGNAME}"; then
    echo "Error: Failed to clone repository"
    rm -rf "${TEMP_DIR}"
    exit 1
  fi
  
  # Update script directory to use downloaded files
  SCRIPT_DIR="${TEMP_DIR}/${PRGNAME}"
  echo "Successfully downloaded latest version"
  
  # Show version difference if installing over existing installation
  if [[ -d "${INSTALL_DIR}" && -f "${INSTALL_DIR}/html_deltags.py" ]]; then
    echo
    echo "Upgrading from installed version to latest repository version:"
    if command -v git &> /dev/null; then
      # Try to get version info
      current_version=$(cd "${INSTALL_DIR}" && git describe --tags 2>/dev/null || echo "unknown")
      new_version=$(cd "${SCRIPT_DIR}" && git describe --tags 2>/dev/null || echo "latest")
      echo "Current: ${current_version} -> New: ${new_version}"
    else
      echo "(Git not available for version comparison)"
    fi
  fi
fi

# Create installation directory
echo "Creating installation directory..."
mkdir -p "${INSTALL_DIR}"

# Copy files
echo "Copying files from ${SCRIPT_DIR} to ${INSTALL_DIR}..."
rsync -aqlv "${SCRIPT_DIR}"/ "${INSTALL_DIR}"

# Clean up temp directory if we created one
if ((UPGRADE)) && [[ -d "${TEMP_DIR}" ]]; then
  rm -rf "${TEMP_DIR}"
fi

# Create virtual environment and install dependencies
echo "Creating virtual environment and installing dependencies..."
cd "${INSTALL_DIR}"
python3 -m venv .venv
.venv/bin/pip install -r requirements.txt

# Create symlink to the launcher script
echo "Creating symlink..."
ln -sf "${INSTALL_DIR}/${PRGNAME}" "${SYMLINK_PATH}"
chmod +x "${SYMLINK_PATH}"

echo
echo "Installation complete!"
echo "${PRGNAME} has been installed to ${INSTALL_DIR}"
echo "You can run it using the '${PRGNAME}' command"
echo

# Ask if user wants to see help
read -r -p "Show ${PRGNAME} help? (y/n) " show_help
if [[ "$show_help" == "y" ]]; then
  "${SYMLINK_PATH}" --help | less -FXRS 2>/dev/null || "${SYMLINK_PATH}" --help
fi

#fin